package d0416;

public class 자료구조 {
//            *작업 : process
//	컴퓨터가 데이터 나 *작업을 저장하는 *형태
//	형태 ) 1. List
//			선형 구조(배열), 순차탐색
//			이진검색이 있으나 정령이 되어 있어야 함
//			데이터를 검색하거나 추가하거나 삭제하는데 오래걸림
//			데이터 검색, 추가, 삭제 성능 낮음
//	
//			LinkedList
//			서로 손을 맞잡고 있는 구조
//			
//	
//			1-1. stack
//			작업 넣을때 push 빼낼때는 pop
//			입,출구가 하나
//			넣을때는 a b c d 빼낼때는 d c b a
//			선입후출(first in last out)
//			ctrl + z 가 가장 대표적 stack
//			최근에 수정한 것 순으로 나옴
//			작업을 태스크 라고 하고 여러 태스크 생성되었을때 모든 테스크에서 작업가능 한것을 멀티테스킹
//			
//	
//	
//	
//			1-2 Queue
//			작업 넣을때 push 빼낼때는 pop
//			입,출구가 한방향 들어온 곳으로 못 나감(이런 단방향 통로를 stream 이라고 함)
//			넣을때 a b c d 나올때 a b c d
//			선입선출 (first in first out)
//			데이터 스트리밍을 할때 계속 출력(pop)하면 매끄럽지 않으니 중간에 양동이(buffer)를 둬서 다 차면 출력
//			양동이가 다 찰때까지 기다리는것을 buffering 버퍼링 이라고 한다
//	
//	
//	
//	
//	
//		  2. Map 
//			Key 값으로 Value에 저장함
//			키 값만 알고 있으면 추가 삭제 검색이 쉬움
//			순서가 없어서 정렬이 안됌
//			Key는 set Value는 put 으로 값을 집어넣음
//			set은 절대 중복되지 않아야 함
//	
//	
//	
//			*Hash Map 나중에 찾아봐라
//			
//	
//	
//		  3. Tree
//			탐색형 형태 상속과 비슷
//			데이터 한개를 node 라고 부르면 상위 하위 node 라고 함
//			최상위 node 는 root node 라고 함
//			데이터를 검색 하는데 매우 편리함
//	
//	
//	
//	
}
